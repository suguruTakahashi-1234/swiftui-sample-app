name: Auto Move PR to Review Column

on:
  pull_request:
    types: [opened]

jobs:
  move_pr_to_column:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        script: |
          const PROJECT_NUMBER = YOUR_PROJECT_NUMBER_HERE;  // この部分をあなたのプロジェクト番号で置き換えてください
          const COLUMN_NAME = "👀 In Review (Issue)";

          async function getProjectIdFromNumber(projectNumber) {
            console.log(`Fetching projects for repo: ${context.repo.full_name}`);
            const projects = await github.rest.repos.listProjects({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(`Looking for project with number: ${projectNumber} in fetched projects`);
            const project = projects.data.find(p => p.number === projectNumber);
            if (!project) {
              throw new Error(`Project with number ${projectNumber} not found.`);
            }
            console.log(`Found project ID: ${project.id} for project number: ${projectNumber}`);
            return project.id;
          }

          async function getColumnIdFromName(projectId, columnName) {
            console.log(`Fetching columns for project ID: ${projectId}`);
            const columns = await github.rest.projects.listColumns({
              project_id: projectId
            });
            console.log(`Looking for column with name: ${columnName} in fetched columns`);
            const column = columns.data.find(c => c.name === columnName);
            if (!column) {
              throw new Error(`Column with name ${columnName} not found.`);
            }
            console.log(`Found column ID: ${column.id} for column name: ${columnName}`);
            return column.id;
          }

          async function movePrToColumn(columnId) {
            console.log(`Moving PR #${context.payload.pull_request.number} to column: ${COLUMN_NAME}`);
            await github.rest.projects.createCard({
              column_id: columnId,
              content_id: context.payload.pull_request.id,
              content_type: "PullRequest"
            });
            console.log(`Successfully moved PR #${context.payload.pull_request.number} to column: ${COLUMN_NAME}`);
          }

          const projectId = await getProjectIdFromNumber(PROJECT_NUMBER);
          const columnId = await getColumnIdFromName(projectId, COLUMN_NAME);
          await movePrToColumn(columnId);
